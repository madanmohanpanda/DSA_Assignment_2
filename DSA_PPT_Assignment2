Q1
import java.util.Arrays;

public class ArrayPairSum {
    
    public static void main(String[] args) {
        int[] nums = {1, 4, 3, 2, 6, 5}; // Example array
        int maxSum = arrayPairSum(nums);
        
        System.out.println("Maximized Sum: " + maxSum);
    }
    
    public static int arrayPairSum(int[] nums) {
        Arrays.sort(nums); // Sort the array in ascending order
        int maxSum = 0;
        
        for (int i = 0; i < nums.length; i += 2) {
            maxSum += nums[i]; // Sum the minimum value of each pair
        }
        
        return maxSum;
    }
}
Q2.
  import java.util.HashSet;
import java.util.Set;

public class MaxCandies {
    
    public static void main(String[] args) {
        int[] candyType = {1, 1, 2, 2, 3, 3}; // Example array
        int maxTypes = maxCandies(candyType);
        
        System.out.println("Maximum Number of Candy Types: " + maxTypes);
    }
    
    public static int maxCandies(int[] candyType) {
        int maxTypes = 0;
        int maxAllowed = candyType.length / 2;
        
        Set<Integer> uniqueCandies = new HashSet<>();
        
        for (int candy : candyType) {
            uniqueCandies.add(candy);
            
            // If the maximum number of allowed candies is reached, break the loop
            if (uniqueCandies.size() == maxAllowed) {
                break;
            }
        }
        
        maxTypes = uniqueCandies.size();
        
        return maxTypes;
    }
}

Q3.
  import java.util.HashMap;
import java.util.Map;

public class LongestHarmoniousSubsequence {
    
    public static void main(String[] args) {
        int[] nums = {1, 3, 2, 2, 5, 2, 3, 7}; // Example array
        int longestSubsequenceLength = findLHS(nums);
        
        System.out.println("Length of Longest Harmonious Subsequence: " + longestSubsequenceLength);
    }
    
    public static int findLHS(int[] nums) {
        Map<Integer, Integer> frequencyMap = new HashMap<>();
        
        // Count the frequency of each number
        for (int num : nums) {
            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
        }
        
        int longestSubsequenceLength = 0;
        
        // Check each number and its adjacent numbers
        for (int num : frequencyMap.keySet()) {
            if (frequencyMap.containsKey(num + 1)) {
                int currentLength = frequencyMap.get(num) + frequencyMap.get(num + 1);
                longestSubsequenceLength = Math.max(longestSubsequenceLength, currentLength);
            }
        }
        
        return longestSubsequenceLength;
    }
}
Q 4
  public class FlowerPlanting {
    
    public static void main(String[] args) {
        int[] flowerbed = {1, 0, 0, 0, 1}; // Example flowerbed
        int n = 1; // Number of new flowers
        
        boolean canPlant = canPlaceFlowers(flowerbed, n);
        
        System.out.println("Can Plant: " + canPlant);
    }
    
    public static boolean canPlaceFlowers(int[] flowerbed, int n) {
        int count = 0;
        int i = 0;
        
        while (i < flowerbed.length) {
            if (flowerbed[i] == 0 && (i == 0 || flowerbed[i - 1] == 0) && (i == flowerbed.length - 1 || flowerbed[i + 1] == 0)) {
                flowerbed[i] = 1;
                count++;
            }
            i++;
        }
        
        return count >= n;
    }
}
Q5. 
  Given an integer array nums, find three numbers whose product is maximum and return the maximum product.
import java.util.Arrays;

public class MaximumProduct {
    
    public static void main(String[] args) {
        int[] nums = {1, 2, 3, 4}; // Example array
        int maxProduct = maximumProduct(nums);
        
        System.out.println("Maximum Product: " + maxProduct);
    }
    
    public static int maximumProduct(int[] nums) {
        Arrays.sort(nums); // Sort the array in ascending order
        
        int n = nums.length;
        
        // Find the maximum product by considering two cases:
        // 1. The product of the three largest elements
        // 2. The product of the two smallest elements and the largest element
        int product1 = nums[n - 1] * nums[n - 2] * nums[n - 3];
        int product2 = nums[0] * nums[1] * nums[n - 1];
        
        return Math.max(product1, product2);
    }
}

Q6.
  Given an array of integers nums which is sorted in ascending order, and an integer target,
write a function to search target in nums. If target exists, then return its index. Otherwise,
return -1
  public class BinarySearch {
    
    public static void main(String[] args) {
        int[] nums = {1, 3, 5, 7, 9}; // Example sorted array
        int target = 5; // Example target
        
        int index = search(nums, target);
        
        System.out.println("Target Index: " + index);
    }
    
    public static int search(int[] nums, int target) {
        int left = 0;
        int right = nums.length - 1;
        
        while (left <= right) {
            int mid = left + (right - left) / 2;
            
            if (nums[mid] == target) {
                return mid; // Target found
            } else if (nums[mid] < target) {
                left = mid + 1; // Search in the right half
            } else {
                right = mid - 1; // Search in the left half
            }
        }
        
        return -1; // Target not found
    }
}

Q7.
  An array is monotonic if it is either monotone increasing or monotone decreasing.
   public static boolean isMonotonic(int[] array) {
        boolean increasing = true;
        boolean decreasing = true;
        
        for (int i = 1; i < array.length; i++) {
            if (array[i] < array[i - 1]) {
                increasing = false;
            }
            if (array[i] > array[i - 1]) {
                decreasing = false;
            }
        }
        
        return increasing || decreasing;
    }

Q8.
  import java.util.Arrays;

public class MinimumScore {
    
    public static void main(String[] args) {
        int[] nums = {1, 3, 2, 4, 6}; // Example array
        int k = 3; // Example k
        
        int minimumScore = minimumScore(nums, k);
        
        System.out.println("Minimum Score: " + minimumScore);
    }
    
    public static int minimumScore(int[] nums, int k) {
        Arrays.sort(nums); // Sort the array in ascending order
        
        int n = nums.length;
        int minimumScore = nums[n - 1] - nums[0]; // Initial minimum score
        
        int minVal = nums[0] + k;
        int maxVal = nums[n - 1] - k;
        
        for (int i = 0; i < n - 1; i++) {
            int currentMin = Math.min(minVal, nums[i + 1] - k);
            int currentMax = Math.max(maxVal, nums[i] + k);
            minimumScore = Math.min(minimumScore, currentMax - currentMin);
        }
        
        return minimumScore;
    }
}

  

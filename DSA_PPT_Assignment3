1.

import java.util.Arrays;

public class ThreeSumClosest {
    public static int threeSumClosest(int[] nums, int target) {
        Arrays.sort(nums);
        int closestSum = nums[0] + nums[1] + nums[2];

        for (int i = 0; i < nums.length - 2; i++) {
            int left = i + 1;
            int right = nums.length - 1;

            while (left < right) {
                int currentSum = nums[i] + nums[left] + nums[right];

                if (currentSum == target) {
                    return currentSum;
                }

                if (Math.abs(currentSum - target) < Math.abs(closestSum - target)) {
                    closestSum = currentSum;
                }

                if (currentSum < target) {
                    left++;
                } else {
                    right--;
                }
            }
        }

        return closestSum;
    }

    public static void main(String[] args) {
        int[] nums = {-1, 2, 1, -4};
        int target = 1;

        int closestSum = threeSumClosest(nums, target);
        System.out.println("Closest sum: " + closestSum);
    }
}

2.
  import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class FourSum {
    
    public static void main(String[] args) {
        int[] nums = {1, 0, -1, 0, -2, 2}; // Example array
        int target = 0; // Example target
        
        List<List<Integer>> quadruplets = fourSum(nums, target);
        
        System.out.println("Unique Quadruplets: " + quadruplets);
    }
    
    public static List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> quadruplets = new ArrayList<>();
        
        Arrays.sort(nums); // Sort the array in ascending order
        
        int n = nums.length;
        
        for (int a = 0; a < n - 3; a++) {
            if (a > 0 && nums[a] == nums[a - 1]) {
                continue; // Skip duplicate values for 'a'
            }
            
            for (int b = a + 1; b < n - 2; b++) {
                if (b > a + 1 && nums[b] == nums[b - 1]) {
                    continue; // Skip duplicate values for 'b'
                }
                
                int left = b + 1;
                int right = n - 1;
                
                while (left < right) {
                    int sum = nums[a] + nums[b] + nums[left] + nums[right];
                    
                    if (sum < target) {
                        left++; // Increase 'left' for a larger sum
                    } else if (sum > target) {
                        right--; // Decrease 'right' for a smaller sum
                    } else {
                        // Found a quadruplet with the target sum
                        quadruplets.add(Arrays.asList(nums[a], nums[b], nums[left], nums[right]));
                        
                        // Skip duplicate values for 'left'
                        while (left < right && nums[left] == nums[left + 1]) {
                            left++;
                        }
                        
                        // Skip duplicate values for 'right'
                        while (left < right && nums[right] == nums[right - 1]) {
                            right--;
                        }
                        
                        left++; // Move 'left' to the next unique value
                        right--; // Move 'right' to the next unique value
                    }
                }
            }
        }
        
        return quadruplets;
    }
}

3.
  import java.util.ArrayList;
import java.util.List;

public class Permutations {
    
    public static void main(String[] args) {
        int[] nums = {1, 2, 3}; // Example array
        
        List<List<Integer>> permutations = permute(nums);
        
        System.out.println("Permutations: " + permutations);
    }
    
    public static List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> permutations = new ArrayList<>();
        
        backtrack(nums, new ArrayList<>(), permutations);
        
        return permutations;
    }
    
    private static void backtrack(int[] nums, List<Integer> current, List<List<Integer>> permutations) {
        if (current.size() == nums.length) {
            permutations.add(new ArrayList<>(current));
        } else {
            for (int i = 0; i < nums.length; i++) {
                if (current.contains(nums[i])) {
                    continue; // Skip duplicate values
                }
                current.add(nums[i]);
                backtrack(nums, current, permutations);
                current.remove(current.size() - 1);
            }
        }
    }
}


4.
    Given a sorted array of distinct integers and a target value, return the index if the
target is found. If not, return the index where it would be if it were inserted in
order.

    public class SearchInsertPosition {
    public static int searchInsert(int[] nums, int target) {
        int left = 0;
        int right = nums.length - 1;

        while (left <= right) {
            int mid = left + (right - left) / 2;

            if (nums[mid] == target) {
                return mid;
            } else if (nums[mid] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }

        // If the target is not found, return the index where it would be inserted
        return left;
    }

    public static void main(String[] args) {
        int[] nums = {1, 3, 5, 6};
        int target = 4;

        int index = searchInsert(nums, target);
        System.out.println("Index: " + index);
    }
}

5/.

import java.util.Arrays;

public class AddOneToLargeInteger {
    public static int[] addOne(int[] digits) {
        int n = digits.length;
        int carry = 1;

        for (int i = n - 1; i >= 0; i--) {
            int sum = digits[i] + carry;
            digits[i] = sum % 10;
            carry = sum / 10;

            if (carry == 0) {
                break;
            }
        }

        if (carry == 1) {
            int[] result = new int[n + 1];
            result[0] = carry;
            System.arraycopy(digits, 0, result, 1, n);
            return result;
        }

        return digits;
    }

    public static void main(String[] args) {
        int[] digits = {1, 2, 3};
        int[] result = addOne(digits);

        System.out.println("Original Integer: " + Arrays.toString(digits));
        System.out.println("Updated Integer: " + Arrays.toString(result));
    }
}

6.
  public class SingleNumber {
    
    public static void main(String[] args) {
        int[] nums = {2, 1, 4, 5, 2, 4, 1}; // Example array
        
        int singleNumber = findSingleNumber(nums);
        
        System.out.println("Single Number: " + singleNumber);
    }
    
    public static int findSingleNumber(int[] nums) {
        int result = 0;
        
        for (int num : nums) {
            result ^= num; // Using XOR operation to find the single number
        }
        
        return result;
    }
}

7.
  import java.util.ArrayList;
import java.util.List;

public class MissingRanges {
    
    public static void main(String[] args) {
        int[] nums = {0, 1, 3, 50, 75}; // Example array
        int lower = 0; // Example lower bound
        int upper = 99; // Example upper bound
        
        List<String> missingRanges = findMissingRanges(nums, lower, upper);
        
        System.out.println("Missing Ranges: " + missingRanges);
    }
    
    public static List<String> findMissingRanges(int[] nums, int lower, int upper) {
        List<String> missingRanges = new ArrayList<>();
        
        // Handle the lower bound
        if (nums[0] > lower) {
            missingRanges.add(formRange(lower, nums[0] - 1));
        }
        
        // Handle the middle ranges
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] > nums[i - 1] + 1) {
                missingRanges.add(formRange(nums[i - 1] + 1, nums[i] - 1));
            }
        }
        
        // Handle the upper bound
        if (nums[nums.length - 1] < upper) {
            missingRanges.add(formRange(nums[nums.length - 1] + 1, upper));
        }
        
        return missingRanges;
    }
    
    private static String formRange(int start, int end) {
        if (start == end) {
            return String.valueOf(start);
        } else {
            return start + "->" + end;
        }
    }
}


8.import java.util.Arrays;

public class MeetingRooms {
    public static boolean canAttendAllMeetings(int[][] intervals) {
        Arrays.sort(intervals, (a, b) -> a[0] - b[0]);

        for (int i = 1; i < intervals.length; i++) {
            if (intervals[i][0] < intervals[i - 1][1]) {
                return false;
            }
        }

        return true;
    }

    public static void main(String[] args) {
        int[][] intervals = {
            {0, 30},
            {5, 10},
            {15, 20}
        };

        boolean canAttend = canAttendAllMeetings(intervals);
        System.out.println("Can attend all meetings: " + canAttend);
    }
}

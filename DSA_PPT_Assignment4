1. Given three integer arrays arr1, arr2 and arr3 sorted in strictly increasing order, return a sorted array of 
only the integers that appeared in all three arrays.

    import java.util.ArrayList;
import java.util.List;

public class CommonElements {
    public static List<Integer> findCommonElements(int[] arr1, int[] arr2, int[] arr3) {
        List<Integer> commonElements = new ArrayList<>();

        int i = 0, j = 0, k = 0;

        while (i < arr1.length && j < arr2.length && k < arr3.length) {
            if (arr1[i] == arr2[j] && arr2[j] == arr3[k]) {
                commonElements.add(arr1[i]);
                i++;
                j++;
                k++;
            } else if (arr1[i] < arr2[j]) {
                i++;
            } else if (arr2[j] < arr3[k]) {
                j++;
            } else {
                k++;
            }
        }

        return commonElements;
    }

    public static void main(String[] args) {
        int[] arr1 = {1, 2, 3, 4, 5};
        int[] arr2 = {2, 4, 5, 6, 7};
        int[] arr3 = {2, 3, 5, 6};

        List<Integer> common = findCommonElements(arr1, arr2, arr3);

        // Print the common elements
        for (int num : common) {
            System.out.print(num + " ");
        }
    }
}

2.
  import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class DistinctIntegers {
    
    public static void main(String[] args) {
        int[] nums1 = {1, 2, 2, 3, 4}; // Example array nums1
        int[] nums2 = {2, 3, 5}; // Example array nums2
        
        List<List<Integer>> answer = distinctIntegers(nums1, nums2);
        
        System.out.println("Distinct Integers in nums1 not in nums2: " + answer.get(0));
        System.out.println("Distinct Integers in nums2 not in nums1: " + answer.get(1));
    }
    
    public static List<List<Integer>> distinctIntegers(int[] nums1, int[] nums2) {
        List<List<Integer>> answer = new ArrayList<>();
        Set<Integer> set1 = new HashSet<>();
        Set<Integer> set2 = new HashSet<>();
        
        for (int num : nums1) {
            set1.add(num); // Add distinct integers from nums1 to set1
        }
        
        for (int num : nums2) {
            set2.add(num); // Add distinct integers from nums2 to set2
        }
        
        List<Integer> distinctNums1 = new ArrayList<>();
        List<Integer> distinctNums2 = new ArrayList<>();
        
        for (int num : set1) {
            if (!set2.contains(num)) {
                distinctNums1.add(num); // Add distinct integers in nums1 not in nums2
            }
        }
        
        for (int num : set2) {
            if (!set1.contains(num)) {
                distinctNums2.add(num); // Add distinct integers in nums2 not in nums1
            }
        }
        
        answer.add(distinctNums1);
        answer.add(distinctNums2);
        
        return answer;
    }
}


3.
    public class MatrixTranspose {
    public static int[][] transposeMatrix(int[][] matrix) {
        int rows = matrix.length;
        int cols = matrix[0].length;

        int[][] transpose = new int[cols][rows];

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                transpose[j][i] = matrix[i][j];
            }
        }

        return transpose;
    }

    public static void main(String[] args) {
        int[][] matrix = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };

        int[][] transpose = transposeMatrix(matrix);

        // Print the transpose
        for (int[] row : transpose) {
            for (int num : row) {
                System.out.print(num + " ");
            }
            System.out.println();
        }
    }
}

4.
  import java.util.Arrays;

public class ArrayPairSum {
    
    public static void main(String[] args) {
        int[] nums = {1, 4, 3, 2}; // Example array
        
        int maxSum = arrayPairSum(nums);
        
        System.out.println("Maximized Sum: " + maxSum);
    }
    
    public static int arrayPairSum(int[] nums) {
        Arrays.sort(nums); // Sort the array in ascending order
        
        int maxSum = 0;
        
        for (int i = 0; i < nums.length; i += 2) {
            maxSum += nums[i]; // Add the minimum value of each pair to the maxSum
        }
        
        return maxSum;
    }
}

5.
  public class StaircaseRows {
    
    public static void main(String[] args) {
        int n = 8; // Example number of coins
        
        int completeRows = arrangeCoins(n);
        
        System.out.println("Number of Complete Rows: " + completeRows);
    }
    
    public static int arrangeCoins(int n) {
        long left = 0;
        long right = n;
        
        while (left <= right) {
            long mid = left + (right - left) / 2;
            long curr = mid * (mid + 1) / 2;
            
            if (curr == n) {
                return (int) mid; // Found the exact number of complete rows
            } else if (curr > n) {
                right = mid - 1; // Adjust the right pointer
            } else {
                left = mid + 1; // Adjust the left pointer
            }
        }
        
        return (int) right; // Number of complete rows is the value of right
    }
}
6.
  Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.

import java.util.Arrays;

public class SquaresSortedArray {
    
    public static void main(String[] args) {
        int[] nums = {-4, -2, 0, 2, 4}; // Example array
        
        int[] sortedSquares = sortedSquares(nums);
        
        System.out.println("Sorted Squares: " + Arrays.toString(sortedSquares));
    }
    
    public static int[] sortedSquares(int[] nums) {
        int n = nums.length;
        int[] sortedSquares = new int[n];
        
        int left = 0;
        int right = n - 1;
        int index = n - 1;
        
        while (left <= right) {
            int squareLeft = nums[left] * nums[left];
            int squareRight = nums[right] * nums[right];
            
            if (squareLeft > squareRight) {
                sortedSquares[index] = squareLeft;
                left++;
            } else {
                sortedSquares[index] = squareRight;
                right--;
            }
            
            index--;
        }
        
        return sortedSquares;
    }
}

7.
  public class MaxIntegersInMatrix {
    
    public static void main(String[] args) {
        int m = 3; // Example number of rows
        int n = 3; // Example number of columns
        int[][] ops = {{2, 2}, {3, 3}}; // Example operations
        
        int maxIntegers = countMaxIntegers(m, n, ops);
        
        System.out.println("Number of Maximum Integers: " + maxIntegers);
    }
    
    public static int countMaxIntegers(int m, int n, int[][] ops) {
        int minRow = m;
        int minCol = n;
        
        for (int[] op : ops) {
            minRow = Math.min(minRow, op[0]);
            minCol = Math.min(minCol, op[1]);
        }
        
        return minRow * minCol;
    }
}
8.
  import java.util.Arrays;

public class ArrayShuffle {
    
    public static void main(String[] args) {
        int[] nums = {1, 2, 3, 4, 5, 6}; // Example array
        
        int[] shuffledArray = shuffle(nums);
        
        System.out.println("Shuffled Array: " + Arrays.toString(shuffledArray));
    }
    
    public static int[] shuffle(int[] nums) {
        int n = nums.length / 2;
        int[] shuffledArray = new int[nums.length];
        
        for (int i = 0; i < n; i++) {
            shuffledArray[2 * i] = nums[i];
            shuffledArray[2 * i + 1] = nums[i + n];
        }
        
        return shuffledArray;
    }
}

